[{"/Users/briannahill/Desktop/figma-project/src/index.js":"1","/Users/briannahill/Desktop/figma-project/src/components/App.js":"2","/Users/briannahill/Desktop/figma-project/src/components/StatusLine.js":"3","/Users/briannahill/Desktop/figma-project/src/components/Task.js":"4","/Users/briannahill/Desktop/figma-project/src/components/Home.js":"5"},{"size":212,"mtime":1611860664973,"results":"6","hashOfConfig":"7"},{"size":2391,"mtime":1611888666639,"results":"8","hashOfConfig":"7"},{"size":885,"mtime":1611881464167,"results":"9","hashOfConfig":"7"},{"size":4005,"mtime":1611888643323,"results":"10","hashOfConfig":"7"},{"size":714,"mtime":1611881309615,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1c30lb7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/briannahill/Desktop/figma-project/src/index.js",[],["25","26"],"/Users/briannahill/Desktop/figma-project/src/components/App.js",[],"/Users/briannahill/Desktop/figma-project/src/components/StatusLine.js",["27"],"import \"../styles/statusLine.scss\";\nimport Task from \"./Task\";\nimport expo from './Home';\n\n\nexport default function StatusLine(props){\nconst {status,tasks,addTask,deleteTask,addEmptyTask,moveTask}= props;\n\nlet taskList, tasksForStatus;\n\nfunction handleAddEmpty(){\n    addEmptyTask(status);\n}\n\nif (tasks){\ntasksForStatus = tasks.filter((task)=>{\n    return task.status === status;\n});\n}\nif(tasksForStatus){\n    taskList=tasksForStatus.map((task)=>{\n        return (\n          <Task \n          addTask={(task)=> addTask(task)}\n          deleteTask={(id)=> deleteTask(id)}\n          moveTask={(id, status)=> moveTask(id, status)}\n          key={task.id}\n          task={task}\n          />  \n        );\n    });\n}\n    return <div className=\"statusLine\">\n        <h3>{status}</h3>\n        {taskList}\n        <button onClick={handleAddEmpty} className=\"button addTask\"></button>\n    </div>;\n}","/Users/briannahill/Desktop/figma-project/src/components/Task.js",["28"],"import \"../styles/task.scss\";\nimport {useState} from \"react\";\nimport Expo from './Home';\n\nexport default function Task(props) {\n    const { addTask, deleteTask, moveTask, task } = props;\n  \n    const [urgencyLevel, setUrgencyLevel] = useState(task.urgency);\n    const [collapsed, setCollapsed] = useState(task.isCollapsed);\n    const [formAction, setFormAction] = useState(\"\");\n  \n    function setUrgency(event) {\n      setUrgencyLevel(event.target.attributes.urgency.value);\n    }\n  \n    function handleSubmit(event) {\n      event.preventDefault();\n  \n      if (formAction === \"save\") {\n        if (collapsed) {\n          setCollapsed(false);\n        } else {\n          let newTask = {\n            id: task.id,\n            title: event.target.elements.title.value,\n            description: event.target.elements.description.value,\n            urgency: urgencyLevel,\n            status: task.status,\n            isCollapsed: true,\n          };\n  \n          addTask(newTask);\n          setCollapsed(true);\n        }\n      }\n  \n      if (formAction === \"delete\") {\n        deleteTask(task.id);\n      }\n    }\n  \n    function handleMoveLeft() {\n      let newStatus = \"\";\n  \n      if (task.status === \"Pending\") {\n        newStatus = \"Backlog\";\n      } else if (task.status === \"Completed\") {\n        newStatus = \"Pending\";\n      }\n  \n      if (newStatus !== \"\") {\n        moveTask(task.id, newStatus);\n      }\n    }\n  \n    function handleMoveRight() {\n      let newStatus = \"\";\n  \n      if (task.status === \"Backlog\") {\n        newStatus = \"Pending\";\n      } else if (task.status === \"Pending\") {\n        newStatus = \"Completed\";\n      }\n  \n      if (newStatus !== \"\") {\n        moveTask(task.id, newStatus);\n      }\n    }\n  \n    return (\n      <div className={`task ${collapsed ? \"collapsedTask\" : \"\"}`}>\n        <button onClick={handleMoveLeft} className=\"button moveTask\">\n          &#171;\n        </button>\n        <form onSubmit={handleSubmit} className={collapsed ? \"collapsed\" : \"\"}>\n          <input\n            type=\"text\"\n            className=\"title input\"\n            name=\"title\"\n            placeholder=\"Enter Title\"\n            disabled={collapsed}\n            defaultValue={task.title}\n          />\n          <textarea\n            rows=\"2\"\n            className=\"description input\"\n            name=\"description\"\n            placeholder=\"Enter Description\"\n            defaultValue={task.description}\n          />\n          <div className=\"urgencyLabels\">\n            <label className={`low ${urgencyLevel === \"low\" ? \"selected\" : \"\"}`}>\n              <input\n                urgency=\"low\"\n                onChange={setUrgency}\n                type=\"radio\"\n                name=\"urgency\"\n              />\n              low\n            </label>\n            <label\n              className={`medium ${urgencyLevel === \"medium\" ? \"selected\" : \"\"}`}\n            >\n              <input\n                urgency=\"medium\"\n                onChange={setUrgency}\n                type=\"radio\"\n                name=\"urgency\"\n              />\n              medium\n            </label>\n            <label\n              className={`high ${urgencyLevel === \"high\" ? \"selected\" : \"\"}`}\n            >\n              <input\n                urgency=\"high\"\n                onChange={setUrgency}\n                type=\"radio\"\n                name=\"urgency\"\n              />\n              high\n            </label>\n          </div>\n          <button\n            onClick={() => {\n              setFormAction(\"save\");\n            }}\n            className=\"button\"\n          >\n            {collapsed ? \"Edit\" : \"Save\"}\n          </button>\n          {collapsed && (\n            <button\n              onClick={() => {\n                setFormAction(\"delete\");\n              }}\n              className=\"button delete\"\n            >\n              X\n            </button>\n          )}\n        </form>\n        <button onClick={handleMoveRight} className=\"button moveTask\">\n          &#187;\n        </button>\n      </div>\n    );\n  }","/Users/briannahill/Desktop/figma-project/src/components/Home.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":12},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'expo' is defined but never used.","Identifier","unusedVar","'Expo' is defined but never used.","no-global-assign","no-unsafe-negation"]